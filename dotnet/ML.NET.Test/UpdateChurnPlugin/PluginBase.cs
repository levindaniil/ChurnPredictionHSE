// <copyright file="PluginBase.cs" company="">
// Copyright (c) 2021 All Rights Reserved
// </copyright>
// <author></author>
// <date>10/14/2021 12:42:12 AM</date>
// <summary>Implements the PluginBase Workflow Activity.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
using System;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;

namespace UpdateChurnAutoML
{
    /// <summary>
    /// Base class for all plug-in classes.
    /// </summary>    
    public partial class PluginBase : IPlugin
    {
        internal PluginBase(Type childClassName)
        {
            this.ChildClassName = childClassName.ToString();
            this.RegisteredEvents = new Collection<PluginEvent>();
        }

        protected string ChildClassName { get; }

        protected Collection<PluginEvent> RegisteredEvents { get; }

        internal IOrganizationService Service { get; private set; }

        internal IPluginExecutionContext Context { get; private set; }

        public void Execute(IServiceProvider serviceProvider)
        {
            if (serviceProvider == null)
            {
                throw new ArgumentNullException("serviceProvider");
            }

            var localContext = new LocalPluginContext(serviceProvider);

            this.Context = localContext.PluginExecutionContext;
            this.Service = localContext.OrganizationService;

            localContext.Trace(string.Format(CultureInfo.InvariantCulture, "Entered {0}.Execute()", this.ChildClassName));

            var context = localContext.PluginExecutionContext;
            try
            {
                var entityAction = this.GetEntityAction(context);
                if (entityAction == null) return;

                localContext.Trace(string.Format(
                    CultureInfo.InvariantCulture,
                    "{0} is firing for Entity: {1}, Message: {2}",
                    this.ChildClassName,
                    context.PrimaryEntityName,
                    context.MessageName));

                entityAction.Invoke(localContext);
            }
            catch (FaultException<OrganizationServiceFault> e)
            {
                localContext.Trace(string.Format(CultureInfo.InvariantCulture, "Exception: {0}", e.ToString()));
                throw;
            }
            finally
            {
                localContext.Trace(string.Format(CultureInfo.InvariantCulture, "Exiting {0}.Execute()", this.ChildClassName));
            }
        }

        protected void RegisterEvent(int step, string message, string entityName, Action<LocalPluginContext> handler)
        {
            this.RegisteredEvents.Add(new PluginEvent(step, message, entityName, handler));
        }

        private Action<LocalPluginContext> GetEntityAction(IPluginExecutionContext context)
        {
            return this.RegisteredEvents
                .FirstOrDefault(pluginEvent =>
                    pluginEvent.Stage == context.Stage &&
                    pluginEvent.MessageName == context.MessageName &&
                    (string.IsNullOrWhiteSpace(pluginEvent.EntityName) || pluginEvent.EntityName == context.PrimaryEntityName))
                ?.Handler;
        }

        protected class LocalPluginContext
        {
            internal IServiceProvider ServiceProvider { get; }

            internal IOrganizationService OrganizationService { get; }

            internal IPluginExecutionContext PluginExecutionContext { get; }

            internal ITracingService TracingService { get; }

            internal LocalPluginContext(IServiceProvider serviceProvider)
            {
                this.ServiceProvider = serviceProvider;
                if (serviceProvider == null)
                {
                    throw new ArgumentNullException("serviceProvider");
                }

                this.PluginExecutionContext = (IPluginExecutionContext)serviceProvider.GetService(typeof(IPluginExecutionContext));
                this.TracingService = (ITracingService)serviceProvider.GetService(typeof(ITracingService));

                var factory = (IOrganizationServiceFactory)serviceProvider.GetService(typeof(IOrganizationServiceFactory));
                this.OrganizationService = factory.CreateOrganizationService(this.PluginExecutionContext.UserId);
            }

            internal void Trace(string message)
            {
                if (string.IsNullOrWhiteSpace(message) || this.TracingService == null)
                {
                    return;
                }

                if (this.PluginExecutionContext == null)
                {
                    this.TracingService.Trace(message);
                }
                else
                {
                    this.TracingService.Trace(
                        "{0}, Correlation Id: {1}, Initiating User: {2}",
                        message,
                        this.PluginExecutionContext.CorrelationId,
                        this.PluginExecutionContext.InitiatingUserId);
                }
            }
        }

        protected static class Constants
        {
            public static class Message
            {
                public static string Create = "Create";
                public static string Update = "Update";
                public static string Delete = "Delete";
            }

            public static class Steps
            {
                public static int PreValidate = 10;
                public static int PreOperation = 20;
                public static int PostOperation = 40;
            }

            public static string Target = "Target";
        }

        protected class PluginEvent
        {
            public PluginEvent(int stage, string messageName, string entityName, Action<LocalPluginContext> handler)
            {
                this.Stage = stage;
                this.MessageName = messageName;
                this.EntityName = entityName;
                this.Handler = handler;
            }

            public int Stage { get; set; }

            public string MessageName { get; set; }

            public string EntityName { get; set; }

            public Action<LocalPluginContext> Handler { get; set; }
        }
    }
}